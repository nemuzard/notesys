<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kama.notes.mapper.MessageMapper">
    <resultMap id="BaseResultMap" type="com.kama.notes.model.entity.Message">
        <id     column="message_id" property="messageId"/>
        <result column="receiver_id" property="receiverId"/>
        <result column="sender_id"   property="senderId"/>
        <result column="type"        property="type"/>
        <result column="target_id"   property="targetId"/>
        <result column="target_type" property="targetType"/>
        <result column="content"     property="content"/>
        <result column="is_read"     property="isRead"/>
        <result column="created_at"  property="createdAt"/>
        <result column="updated_at"  property="updatedAt"/>
    </resultMap>

    <!-- 统一列清单：英文优先并别名回原字段名 -->
    <sql id="Base_Column_List">
        message_id,
        receiver_id,
        sender_id,
        COALESCE(type_en, `type`)     AS `type`,
        target_id,
        target_type,
        COALESCE(content_en, content) AS content,
        is_read,
        created_at,
        updated_at
    </sql>

    <insert id="insert" parameterType="com.kama.notes.model.entity.Message" useGeneratedKeys="true" keyProperty="messageId">
        INSERT INTO message (receiver_id, sender_id, type, target_id, target_type, content, is_read)
        VALUES (#{receiverId}, #{senderId}, #{type}, #{targetId}, #{targetType}, #{content}, #{isRead})
    </insert>

    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM message
        WHERE receiver_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <select id="selectByParams" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM message
        <where>
            receiver_id = #{userId}
            <if test="params.type != null">
                AND ( `type` = #{params.type} OR type_en = #{params.type} )
            </if>
            <if test="params.isRead != null">
                AND is_read = #{params.isRead}
            </if>
            <if test="params.startTime != null">
                AND created_at &gt;= #{params.startTime}
            </if>
            <if test="params.endTime != null">
                AND created_at &lt;= #{params.endTime}
            </if>
        </where>
        <!-- 强烈建议白名单而不是直接插值，避免 SQL 注入 -->
        <choose>
            <when test="params.sortField == 'created_at'">ORDER BY created_at</when>
            <when test="params.sortField == 'updated_at'">ORDER BY updated_at</when>
            <when test="params.sortField == 'is_read'">   ORDER BY is_read</when>
            <otherwise>                                   ORDER BY created_at</otherwise>
        </choose>
        <choose>
            <when test="params.sortOrder == 'asc'"> ASC </when>
            <otherwise>                               DESC</otherwise>
        </choose>
        LIMIT #{params.pageSize}
        OFFSET #{offset}
    </select>

    <select id="countByParams" resultType="int">
        SELECT COUNT(*)
        FROM message
        <where>
            receiver_id = #{userId}
            <if test="params.type != null">
                AND ( `type` = #{params.type} OR type_en = #{params.type} )
            </if>
            <if test="params.isRead != null">
                AND is_read = #{params.isRead}
            </if>
            <if test="params.startTime != null">
                AND created_at &gt;= #{params.startTime}
            </if>
            <if test="params.endTime != null">
                AND created_at &lt;= #{params.endTime}
            </if>
        </where>
    </select>

    <update id="markAsRead">
        UPDATE message
        SET is_read = true, updated_at = NOW()
        WHERE message_id = #{messageId} AND receiver_id = #{userId}
    </update>

    <update id="markAllAsRead">
        UPDATE message
        SET is_read = true, updated_at = NOW()
        WHERE receiver_id = #{userId} AND is_read = false
    </update>

    <update id="markAsReadBatch">
        UPDATE message
        SET is_read = true, updated_at = NOW()
        WHERE message_id IN
        <foreach item="messageId" collection="messageIds" separator="," open="(" close=")">
            #{messageId}
        </foreach>
        AND receiver_id = #{userId}
    </update>

    <delete id="deleteMessage">
        DELETE FROM message
        WHERE message_id = #{messageId} AND receiver_id = #{userId}
    </delete>

    <!-- 未读统计（英文优先输出 type） -->
    <select id="countUnread" resultType="int">
        SELECT COUNT(*) FROM message
        WHERE receiver_id = #{userId} AND is_read = false
    </select>

    <select id="countUnreadByType" resultType="com.kama.notes.model.vo.message.UnreadCountByType">
        SELECT 
            COALESCE(type_en, `type`) AS `type`,
            COUNT(*) AS count
        FROM message
        WHERE receiver_id = #{userId}
          AND is_read = false
        GROUP BY COALESCE(type_en, `type`)
    </select>
</mapper>
